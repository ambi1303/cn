#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#include <sys/types.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void handle_client(int client_socket) {
    char buffer[BUFFER_SIZE];
    char *hello = "Hello from server";

    // Clear the buffer using memset
    memset(buffer, 0, BUFFER_SIZE);

    // Read data from the client
    ssize_t valread = read(client_socket, buffer, BUFFER_SIZE - 1);
    if (valread < 0) {
        perror("Read failed");
    } else {
        // Print the received message
        printf("Received: %s\n", buffer);
    }

    // Send a response back to the client
    send(client_socket, hello, strlen(hello), 0);
    printf("Hello message sent\n");

    // Close the client socket
    close(client_socket);
}

int main() {
    int server_fd, client_socket;
    struct sockaddr_in address;
    int opt = 1;
    socklen_t addrlen = sizeof(address);

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Setting socket options
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("Setsockopt failed");
        exit(EXIT_FAILURE);
    }

    // Setting up the address structure
    address.sin_family = AF_INET; // IPv4
    address.sin_addr.s_addr = INADDR_ANY; // Listen on all interfaces
    address.sin_port = htons(PORT); // Port number

    // Binding the socket to the specified address and port
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listening for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    while (1) {
        // Accepting a new connection
        if ((client_socket = accept(server_fd, (struct sockaddr*)&address, &addrlen)) < 0) {
            perror("Accept failed");
            continue; // Continue to listen for new connections
        }

        // Fork a new process to handle the client
        pid_t pid = fork();

        if (pid < 0) {
            perror("Fork failed");
            close(client_socket);
            continue; // Continue to accept new connections
        }

        // Child process handles the client
        if (pid == 0) {
            // Close the server socket in the child process
            close(server_fd);
            handle_client(client_socket);
            exit(0); // Exit the child process
        } else {
            // Parent process closes the client socket
            close(client_socket);
        }
    }

    // Closing the listening socket (unreachable code in this loop)
    close(server_fd);
    return 0;
}
//client code 
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 8080

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char* hello = "Hello from client";
    char buffer[1024] = {0};

    // Creating socket file descriptor
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\nSocket creation error \n");
        return -1;
    }

    serv_addr.sin_family = AF_INET; // IPv4
    serv_addr.sin_port = htons(PORT); // Port number

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    // Connecting to the server
    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    // Sending a message to the server
    send(sock, hello, strlen(hello), 0);
    printf("Hello message sent\n");

    // Reading the server response
    read(sock, buffer, 1024);
    printf("%s\n", buffer);

    // Closing the socket
    close(sock);
    return 0;
}